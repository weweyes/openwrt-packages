#!/bin/sh /etc/rc.common
START=99
STOP=15
SERVICE_DAEMONIZE=1
NAME=shadowsocksr
FWI=$(uci -q get firewall.$NAME.path) || FWI=/var/etc/shadowsocksr.include
CONFIG_FILE=/var/etc/ssr-retcp.json
CONFIG_UDP_FILE=/var/etc/ssr-reudp.json
CONFIG_NF_FILE=/var/etc/ssr-nf.json
CONFIG_SOCK5_FILE=/var/etc/ssr-socks5.json
CRON_FILE=/etc/crontabs/root
LOCK=/var/lock/ssr-plusboot.lock
SDNS=/var/etc/smartdns
DNS_T=$SDNS/smartdns.conf
CON_T=$SDNS/rules.conf
PID=/var/run/smartdns.pid
LOG=/tmp/ssrplus.log
BIN_DIR=/usr/share/ssrplus
DNS_DIR=/tmp/dnsmasq.ssr
CRON="grep -q $BIN_DIR $CRON_FILE && sed -i '/\/share\/ssrplus/d' $CRON_FILE"
DATE="date +'%Y-%m-%d %H:%M:%S'"
redir_tcp=0
redir_udp=0
redir_nf=0
smartdns_flag=0
chinadns_flag=0
local_enable=0
switch_enable=0
switch_server=$1
trojan_udp=0
ip_port=0
trojan_udp_port=0
server_count=0
threads=1
STATUS=Y

uci_get_by_name(){
	ret=$(uci -q get $NAME.$1.$2)
	echo ${ret:=$3}
}

uci_get_by_type(){
	ret=$(uci -q get $NAME.@$1[0].$2)
	echo ${ret:=$3}
}

GLOBAL_SERVER=$(uci_get_by_type global global_server)
gfw_mode=$(uci_get_by_type global gfw_mode 0)
run_mode=$(uci_get_by_type global run_mode router)
SO_SERVER=$(uci_get_by_type socks5_proxy server 0)
dns_mode_l=$(uci_get_by_type global dns_mode_l 0)

firstdown(){
	[ $1 = 1 ] && A=$BIN_DIR/checknetwork && B=check
	[ $1 = 2 ] && A=$BIN_DIR/update && B=--First
	r=1
	while ps -w | grep $A | grep -v grep >/dev/null 2>&1;do
		[ $r -ge 10 ] && return 1 || let r++
		sleep 1
	done
	rm -f /var/lock/ssr-plus.lock
	service_start ${A} ${B}
}

f_bin(){
	case $1 in
		ss)ret=$(which ss-redir);;
		ss-local)ret=$(which ss-local);;
		ss-server)ret=$(which ss-server);;
		ssr)ret=$(which ssr-redir);;
		ssr-local)ret=$(which ssr-local);;
		ssr-server)ret=$(which ssr-server);;
		v2ray|vless)ret=$(which v2ray) || ret=/usr/bin/v2ray/v2ray;;
		trojan)ret=$(which trojan);;
		naiveproxy)ret=$(which naive);;
		socks5|tun)ret=$(which redsocks2);;
	esac
	echo ${ret:=0}
}

gen_config_file(){
	sport=$(uci_get_by_name $1 server_port)
	lport=$(uci_get_by_name $1 local_port 1234)
	pass=$(uci_get_by_name $1 password)
	timeout=$(uci_get_by_name $1 timeout 60)
	case $2 in
		0)[ $kcp_enable = 1 ] && hostip=127.0.0.1 || hostip=$server;config_file=$CONFIG_FILE;PROTO=redir;FILE_NAME=retcp;;
		1)hostip=$udp_server;config_file=$CONFIG_UDP_FILE;PROTO=redir;FILE_NAME=nf;;
		2)hostip=$nf_ip;lport=$nf_local_port;config_file=$CONFIG_NF_FILE;;
		3)hostip=$socks5_ip;lport=$socks5_port;config_file=$CONFIG_SOCK5_FILE;PROTO=socks;FILE_NAME=socks5;;
	esac
	[ $(uci_get_by_name $1 fast_open 0) = 1 ] && fast=true || fast=false
	type=$(uci_get_by_name $1 type)
	case $type in
		ss)
			cat <<-EOF > $config_file
{
"server":"$hostip",
"server_port":$sport,
"local_address":"0.0.0.0",
"local_port":$lport,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method_ss)",
"reuse_port":true,
"fast_open":$fast
}
EOF
			plugin=$(uci_get_by_name $1 plugin 0)
			if [ $plugin != 0 -a -x "$(which $plugin)" ];then
				sed -i "s@$hostip\",@$hostip\",\n\"plugin\":\"$plugin\",\n\"plugin_opts\":\"$(uci_get_by_name $1 plugin_opts)\",@" $config_file
			fi;;
		ssr)
			cat <<-EOF > $config_file
{
"server":"$hostip",
"server_port":$sport,
"local_address":"0.0.0.0",
"local_port":$lport,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method)",
"protocol":"$(uci_get_by_name $1 protocol)",
"protocol_param":"$(uci_get_by_name $1 protocol_param)",
"obfs":"$(uci_get_by_name $1 obfs)",
"obfs_param":"$(uci_get_by_name $1 obfs_param)",
"reuse_port":true,
"fast_open":$fast
}
EOF
;;
	naiveproxy)
		cat <<-EOF > /var/etc/naive-ssr-$FILE_NAME.json
{
"listen":"$PROTO://0.0.0.0:$lport",
"proxy":"https://$(uci_get_by_name $1 username):$pass@$(uci_get_by_name $1 server):$sport",
"concurrency":"${3:-1}"
}
EOF
;;
	esac
}

start_dns(){
	$(which smartdns) -c $DNS_T
	case $dns_mode in
		0)doh=$(echo $doh | sed 's/ -http-host dns.google//g');echo "`eval $DATE` SmartDNS : Use $doh to start in DoH mode (Foreign DNS)" >> $LOG
			[ -n "$NF" ] && doh_nf=$(echo $doh_nf | sed 's/ -http-host dns.google//g') && echo "`eval $DATE` SmartDNS : Use $doh_nf to start in DoH mode (Netflix DNS)" >> $LOG;;
		1)dns=$(echo $dns | sed 's/ /,/g');echo "`eval $DATE` SmartDNS : Use $dns to start in TCP mode (Foreign DNS)" >> $LOG
			[ -n "$NF" ] && dns_nf=$(echo $dns_nf | sed 's/ /,/g') && echo "`eval $DATE` SmartDNS : Use $dns_nf to start in TCP mode (Netflix DNS)" >> $LOG;;
	esac
	case $dns_mode_l in
		0)echo "`eval $DATE` SmartDNS : Use $doh_l to start in DoH mode (Domestic DNS)" >> $LOG;;
		1)dns_l=$(echo $dns_l | sed 's/ /,/g');echo "`eval $DATE` SmartDNS : Use $dns_l to start in UDP mode (Domestic DNS)" >> $LOG;;
	esac
	if [ $run_mode = router ];then
		service_start $(which chinadns-ng) -l 5337 -c '127.0.0.1#5336' -t '127.0.0.1#5335' -4 china_v4 -6 china_v6 -f -n $([ $gfw_mode = 1 ] && echo -g /tmp/ssrplus/gfw.list)
		echo "`eval $DATE` ChinaDNS : Start ChinaDNS-NG successful!" >> $LOG
	fi
}

preload(){
	if [ "$dns_a" = 1 -o "$dns_b" = 1 ];then
		[ "$dns_a" = 1 ] || doh_t=
		[ "$dns_b" = 1 ] || doh_nf_t=
		X=ns;Y=$doh_t;Z=$doh_nf_t
	elif [ $run_mode = all -a "$dns_c" = 1 ];then
		X=ns;Y=$doh_l_t
	fi
	service_start $BIN_DIR/ssr-preload $run_mode $X $Y $Z
}

rules(){
	[ -n "$GLOBAL_SERVER" ] || return 1
	if ps -w | grep ssr-retcp | grep -v grep >/dev/null;then
		echo "ShadowsocksR Plus+ has Started.";return 1
	fi
	if ! cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Check network status...' && ! cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Download IP/GFW files...';then
		[ -s $LOG ] && echo '------------------------------------------------------------------------------------------------------------------------------------------------------------' >> $LOG
		echo "`eval $DATE` SSR-rules : Check network status..." >> $LOG
	fi
	if ! curl -so /dev/null -m 3 www.baidu.com;then
		echo "`eval $DATE` SSR-rules : Wait for network to connect..." >> $LOG
		firstdown 1;exit 1
	fi
	cat $LOG 2>/dev/null | sed -n '$p' | grep -q 'Download IP/GFW files...' || (echo "`eval $DATE` SSR-rules : Check network status successful!" >> $LOG;echo "`eval $DATE` SSR-rules : Check IP/GFW files..." >> $LOG)
	mkdir -p /var/run /var/etc
	if [ ! -s /tmp/ssrplus/china.txt ] || [ $run_mode = router -a ! -s /tmp/ssrplus/china_v6.txt ] || ([ $run_mode = gfw -o $gfw_mode = 1 ] && [ ! -s /tmp/ssrplus/gfw.list ]);then
		echo "`eval $DATE` SSR-rules : Download IP/GFW files..." >> $LOG
		firstdown 2;exit 1
	fi
	echo "`eval $DATE` SSR-rules : Check IP/GFW files successful!" >> $LOG
	kcp_enable=$(uci_get_by_name $GLOBAL_SERVER kcp_enable 0)
	[ $kcp_enable = 1 ] && kcp_server=$server
	UDP_RELAY_SERVER=$(uci_get_by_type global udp_relay_server)
	[ "$UDP_RELAY_SERVER" = same ] && UDP_RELAY_SERVER=$GLOBAL_SERVER
	if [ "$(uci_get_by_name $UDP_RELAY_SERVER kcp_enable 0)" = 1 ];then
		echo "`eval $DATE` UDP Relay: Can't use KCPTUN to start as UDP Relay Server!" >> $LOG
		UDP_RELAY_SERVER=
	fi
	NF_SERVER=$(uci_get_by_type global nf_server)
	[ "$NF_SERVER" = $GLOBAL_SERVER ] && NF_SERVER=
	start_rules && return 0 || return 1
}

start_rules(){
	server=$(uci_get_by_name $GLOBAL_SERVER server)
	if ! echo $server | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
		if [ -f $LOCK ];then
			r=1
			while ! nslookup $server >/dev/null 2>&1;do
				[ $r -ge 20 ] && return 1 || let r++
				sleep 1
			done
		fi
		if ! A=$(nslookup $server 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
			echo "`eval $DATE` Main Node: Unable to get server address.Check domain name!" >> $LOG;return 1
		fi
		server=$(echo "$A" | sed -n 1p)
	fi

	local_port=$(uci_get_by_name $GLOBAL_SERVER local_port 1234)
	lan_ac_ips=$(uci_get_by_type access_control lan_ac_ips)
	lan_ac_mode=$(uci_get_by_type access_control lan_ac_mode b)
	if [ $GLOBAL_SERVER = "$UDP_RELAY_SERVER" ];then
		UDP=1
		udp_server=$server
		udp_local_port=$local_port
	elif [ -n "$UDP_RELAY_SERVER" ];then
		udp_server=$(uci_get_by_name $UDP_RELAY_SERVER server)
		if ! echo $udp_server | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $udp_server >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $udp_server 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				echo "`eval $DATE` UDP Relay: Unable to get server address.Check domain name!" >> $LOG;return 1
			fi
			udp_server=$(echo "$A" | sed -n 1p)
		fi
		udp_local_port=$(uci_get_by_name $UDP_RELAY_SERVER local_port 1234)
		UDP=1
	fi
	[ "$UDP" = 1 ] && UDP="-S $udp_server -L $udp_local_port"

	case $run_mode in
		router)mode=-r;;
		oversea)mode=-c;;
		all)mode=-z;;
	esac

	if [ -n "$NF_SERVER" -a $run_mode != oversea ];then
		nf_ip=$(uci_get_by_name $NF_SERVER server)
		if ! echo $nf_ip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
			if [ -f $LOCK ];then
				r=1
				while ! nslookup $nf_ip >/dev/null 2>&1;do
					[ $r -ge 20 ] && return 1 || let r++
					sleep 1
				done
			fi
			if ! A=$(nslookup $nf_ip 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
				echo "`eval $DATE` NF Shunt   : Unable to get server address.Check domain name!" >> $LOG;return 1
			fi
			nf_ip=$(echo "$A" | sed -n 1p)
		fi
		let nf_local_port=local_port+1
		NF=1
	fi
	[ "$NF" = 1 ] && NF="-N $nf_ip -P $nf_local_port"

	if [ -n "$lan_ac_ips" ];then
		case $lan_ac_mode in
			w|W|b|B)local ac_ips="$lan_ac_mode$lan_ac_ips";;
		esac
	fi

	dports=$(uci_get_by_type global dports 1)
	if [ $dports = 2 ];then
		proxyport="-m multiport --dports 22,53,587,465,995,993,143,80,443"
	fi

	r=1
	while ! $BIN_DIR/ssr-rules -s "$server" -l "$local_port" -a "$ac_ips" -b "$(uci_get_by_type access_control wan_bp_ips)" -w "$(uci_get_by_type access_control wan_fw_ips)" \
		-p "$(uci_get_by_type access_control lan_fp_ips)" -G "$(uci_get_by_type access_control lan_gm_ips)" -D "$proxyport" $mode $UDP $NF;do
		[ $r -ge 20 ] && echo "`eval $DATE` SSR-rules : Start iptables rules failed!" >> $LOG && return 1
		let r++;sleep 1
	done
	echo "`eval $DATE` SSR-rules : Start iptables rules successful!" >> $LOG
}

start_retcp(){
	if [ $kcp_enable = 1 ];then
		cmd=$(which kcptun-client) || cmd=0
		if [ ! -x $cmd ];then
			echo "`eval $DATE` Main Node: Can't find KCPTUN program, start failed!" >> $LOG;return 1
		fi
		[ $($cmd -v 2>/dev/null | grep kcptun | wc -l) = 0 ] && return 1
		kcp_port=$(uci_get_by_name $GLOBAL_SERVER kcp_port)
		server_port=$(uci_get_by_name $GLOBAL_SERVER server_port)
		password=$(uci_get_by_name $GLOBAL_SERVER kcp_password)
		kcp_param=$(uci_get_by_name $GLOBAL_SERVER kcp_param)
		[ -n "$password" ] && password="--key "${password}
		service_start $cmd -r $kcp_server:$kcp_port -l :$server_port $password $kcp_param
	fi
	threads=$(uci_get_by_type global threads 0)
	[ $threads = 0 ] && threads=$(cat /proc/cpuinfo | grep 'processor' | wc -l)
	gen_config_file $GLOBAL_SERVER 0 $threads
	type=$(uci_get_by_name $GLOBAL_SERVER type)
	cmd=$(f_bin $type)
	if [ ! -x $cmd ];then
		echo "`eval $DATE` Main Node: Can't find $(echo $type | tr a-z A-Z) program, start failed!" >> $LOG;return 1
	fi
	[ $SO_SERVER = same ] && SO_SERVER=$GLOBAL_SERVER
	redir_tcp=1
	case $type in
		ss|ssr)
			redir_tcp=$threads
			for i in $(seq 1 $threads);do
				$cmd -c $CONFIG_FILE >/dev/null 2>&1 &
			done
			[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
			echo "`eval $DATE` Main Node: $name $threads Threads Started!" >> $LOG;;
		v2ray|vless)
			if [ $SO_SERVER = $GLOBAL_SERVER ];then
				port=$(uci_get_by_type socks5_proxy local_port 1080);socks5_start=1;V2=v2-ssr-retcp-ssr-socks5.json
			else
				port=0;V2=v2-ssr-retcp.json
			fi
			$BIN_DIR/gen${type}config $GLOBAL_SERVER tcp $local_port $port $server > /var/etc/$V2
			sed -i 's/\\//g' /var/etc/$V2
			$cmd -c /var/etc/$V2 >/dev/null 2>&1 &
			echo "`eval $DATE` Main Node: $($cmd -version | head -1 | awk '{print$1,$2}') Started!" >> $LOG
			if [ "$socks5_start" = 1 ];then
				echo "`eval $DATE` Socks5 Node: $($cmd -version | head -1 | awk '{print$1,$2}') Started!" >> $LOG
			fi;;
		trojan)
			redir_tcp=$threads
			$BIN_DIR/gentrojanconfig $GLOBAL_SERVER nat $local_port $server > /var/etc/trojan-ssr-retcp.json
			sed -i 's/\\//g' /var/etc/trojan-ssr-retcp.json
			for i in $(seq 1 $threads);do
				$cmd -c /var/etc/trojan-ssr-retcp.json >/dev/null 2>&1 &
			done
			echo "`eval $DATE` Main Node: Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$4}')) $threads Threads Started!" >> $LOG;;
		naiveproxy)
			$cmd /var/etc/naive-ssr-retcp.json >/dev/null 2>&1 &
			echo "`eval $DATE` Main Node: $($cmd --version | head -1) Threads Started!" >> $LOG;;
		socks5)
			redir_tcp=$threads
			$BIN_DIR/genred2config /var/etc/redsocks-ssr-retcp.json socks5 tcp $local_port $server $(uci_get_by_name $GLOBAL_SERVER server_port) \
			$(uci_get_by_name $GLOBAL_SERVER auth_enable 0) $(uci_get_by_name $GLOBAL_SERVER username) $(uci_get_by_name $GLOBAL_SERVER password)
			for i in $(seq 1 $threads);do
				$cmd -c /var/etc/redsocks-ssr-retcp.json >/dev/null 2>&1
			done
			echo "`eval $DATE` Main Node: Socks5 $threads Threads Started!" >> $LOG;;
		tun)
			redir_tcp=$threads
			$BIN_DIR/genred2config /var/etc/redsocks-ssr-retcp.json vpn $(uci_get_by_name $GLOBAL_SERVER iface br-lan) $local_port
			for i in $(seq 1 $threads);do
				$cmd -c /var/etc/redsocks-ssr-retcp.json >/dev/null 2>&1
			done
			echo "`eval $DATE` Main Node: Network Tunnel $threads Threads Started!" >> $LOG;;
	esac
}

start_reudp(){
	type=$(uci_get_by_name $UDP_RELAY_SERVER type)
	cmd=$(f_bin $type)
	if [ ! -x $cmd ];then
		echo "`eval $DATE` UDP Relay: Can't find $(echo $type | tr a-z A-Z) program, start failed!" >> $LOG;return 1
	fi
	redir_udp=1
	case $type in
		ss|ssr)
			gen_config_file $UDP_RELAY_SERVER 1
			$cmd -c $CONFIG_UDP_FILE -U >/dev/null 2>&1 &
			[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
			echo "`eval $DATE` UDP Relay: $name Started!" >> $LOG;;
		v2ray|vless)
			$BIN_DIR/gen${type}config $UDP_RELAY_SERVER udp $udp_local_port 0 $udp_server > /var/etc/v2-ssr-reudp.json
			sed -i 's/\\//g' /var/etc/v2-ssr-reudp.json
			$cmd -c /var/etc/v2-ssr-reudp.json >/dev/null 2>&1 &
			echo "`eval $DATE` UDP Relay: $($cmd -version | head -1 | awk '{print$1,$2}') Started!" >> $LOG;;
		trojan)
			let ip_port=udp_local_port+1;[ $ip_port = "$nf_local_port" ] && let ip_port=ip_port+1
			$BIN_DIR/gentrojanconfig $UDP_RELAY_SERVER client $ip_port $udp_server > /var/etc/trojan-ssr-reudp.json
			sed -i 's/\\//g' /var/etc/trojan-ssr-reudp.json
			$cmd -c /var/etc/trojan-ssr-reudp.json >/dev/null 2>&1 &
			ipt2socks -U -b 0.0.0.0 -4 -s 127.0.0.1 -p $ip_port -l $udp_local_port >/dev/null 2>&1 &
			trojan_udp=1
			trojan_udp_port=$udp_local_port
			echo "`eval $DATE` UDP Relay: Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$4}')) Started!" >> $LOG;;
		naiveproxy)
			redir_udp=0
			echo "`eval $DATE` $($cmd --version | head -1) UDP Relay not supported!" >> $LOG;;
		socks5)
			$BIN_DIR/genred2config /var/etc/redsocks-ssr-reudp.json socks5 udp $udp_local_port $udp_server \
			$(uci_get_by_name $UDP_RELAY_SERVER server_port) $(uci_get_by_name $UDP_RELAY_SERVER auth_enable 0) $(uci_get_by_name $UDP_RELAY_SERVER username) $(uci_get_by_name $UDP_RELAY_SERVER password)
			$cmd -c /var/etc/redsocks-ssr-reudp.json >/dev/null 2>&1
			echo "`eval $DATE` UDP Relay: Socks5 Started!" >> $LOG;;
		tun)
			redir_udp=0
			echo "`eval $DATE` Network Tunnel UDP Relay not supported!" >> $LOG;;
	esac
}

start_renf(){
	type=$(uci_get_by_name $NF_SERVER type)
	cmd=$(f_bin $type)
	if [ ! -x $cmd ];then
		echo "`eval $DATE` NF Shunt   : Can't find $(echo $type | tr a-z A-Z) program, start failed!" >> $LOG;return 1
	fi
	redir_nf=1
	case $type in
		ss|ssr)
			gen_config_file $NF_SERVER 2
			$cmd -c $CONFIG_NF_FILE >/dev/null 2>&1 &
			[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
			echo "`eval $DATE` NF Shunt   : $name Started!" >> $LOG;;
		v2ray|vless)
			$BIN_DIR/gen${type}config $NF_SERVER tcp $nf_local_port 0 $nf_ip > /var/etc/v2-ssr-nf.json
			sed -i 's/\\//g' /var/etc/v2-ssr-nf.json
			$cmd -c /var/etc/v2-ssr-nf.json >/dev/null 2>&1 &
			echo "`eval $DATE` NF Shunt   : $($cmd -version | head -1 | awk '{print$1,$2}') Started!" >> $LOG;;
		trojan)
			$BIN_DIR/gentrojanconfig $NF_SERVER nat $nf_local_port $nf_ip > /var/etc/trojan-ssr-nf.json
			sed -i 's/\\//g' /var/etc/trojan-ssr-nf.json
			$cmd -c /var/etc/trojan-ssr-nf.json >/dev/null 2>&1 &
			echo "`eval $DATE` NF Shunt   : Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$4}')) Started!" >> $LOG;;
		naiveproxy)
			gen_config_file $NF_SERVER 2
			$cmd /var/etc/naive-ssr-nf.json >/dev/null 2>&1 &
			echo "`eval $DATE` NF Shunt   : $($cmd --version | head -1) Started!" >>$LOG;;
		socks5)
			$BIN_DIR/genred2config /var/etc/redsocks-ssr-nf.json socks5 tcp $nf_local_port $nf_ip $(uci_get_by_name $NF_SERVER server_port) \
			$(uci_get_by_name $NF_SERVER auth_enable 0) $(uci_get_by_name $NF_SERVER username) $(uci_get_by_name $NF_SERVER password)
			$cmd -c /var/etc/redsocks-ssr-nf.json >/dev/null 2>&1
			echo "`eval $DATE` NF Shunt   : Socks5 Started!" >> $LOG;;
		tun)
			$BIN_DIR/genred2config /var/etc/redsocks-ssr-nf.json vpn $(uci_get_by_name $NF_SERVER iface "br-lan") $nf_local_port
			$cmd -c /var/etc/redsocks-ssr-nf.json >/dev/null 2>&1
			echo "`eval $DATE` NF Shunt   : Network Tunnel REDIRECT Started!" >> $LOG;;
	esac
}

gen_dns(){
	dns_mode=$(uci_get_by_type global dns_mode 0)
	if [ $dns_mode = 0 ];then
		dns=$(uci_get_by_type global dns cloudflare)
		[ -n "$NF" ] && dns_nf=$(uci_get_by_type global dns_nf google)
		if [ "$dns_nf" = $dns ];then
			dns=cloudflare;dns_nf=google
		fi
		case $dns in
			cloudflare)doh="https://cloudflare-dns.com/dns-query";dns="1.1.1.1 1.0.0.1";dns_a=1;;
			google)doh="https://dns.google/dns-query";dns="8.8.8.8 8.8.4.4";dns_a=1;;
			quad9)doh="https://dns.quad9.net/dns-query";dns="9.9.9.9 149.112.112.112";dns_a=1;;
			opendns)doh="https://doh.opendns.com/dns-query";dns="208.67.222.222 208.67.220.220";dns_a=1;;
			*)doh=$dns;dns=$(echo $dns | awk -F[/:] '{print$4}')
				dns=$(echo $dns | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
				if [ -z "$dns" ];then
					dns="1.1.1.1 1.0.0.1";dns_a=1
				fi;;
		esac
		for i in $dns;do
			case $run_mode in
				gfw|oversea)ipset add blacklist $i 2>/dev/null;;
				*)ipset del ss_spec_wan_ac $i 2>/dev/null || ipset add ss_spec_wan_ac $i nomatch 2>/dev/null;;
			esac
		done
		if [ -n "$NF" ];then
			case $dns_nf in
				cloudflare)doh_nf="https://cloudflare-dns.com/dns-query";dns_nf="1.1.1.1 1.0.0.1";dns_b=1;;
				google)doh_nf="https://dns.google/dns-query";dns_nf="8.8.8.8 8.8.4.4";dns_b=1;;
				quad9)doh_nf="https://dns.quad9.net/dns-query";dns_nf="9.9.9.9 149.112.112.112";dns_b=1;;
				opendns)doh_nf="https://doh.opendns.com/dns-query";dns_nf="208.67.222.222 208.67.220.220";dns_b=1;;
				*)doh_nf=$dns_nf;dns_nf=$(echo $dns_nf | awk -F[/:] '{print$4}')
					dns_nf=$(echo $dns_nf | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
					if [ -z "$dns_nf" ];then
						dns_nf="8.8.8.8 8.8.4.4";dns_b=1
					fi;;
			esac
			for i in $dns_nf;do ipset add netflix $i 2>/dev/null;done
		fi
	else
		dns=$(uci_get_by_type global tcp_dns 1.1.1.1,1.0.0.1)
		[ -n "$NF" ] && dns_nf=$(uci_get_by_type global tcp_dns_nf 8.8.8.8,8.8.4.4)
		if [ "$dns_nf" = $dns ];then
			dns=1.1.1.1,1.0.0.1;dns_nf=8.8.8.8,8.8.4.4
		fi
		dns=$(echo $dns | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
		if ! dns_tmp=$(echo $dns | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1);then
			echo "`eval $DATE` SmartDNS : Get Foreign DNS failed!" >> $LOG
			return 1
		fi
		for i in $dns_tmp;do
			case $run_mode in
				gfw|oversea)ipset add blacklist $i 2>/dev/null;;
				*)ipset del ss_spec_wan_ac $i 2>/dev/null || ipset add ss_spec_wan_ac $i nomatch 2>/dev/null;;
			esac
		done
		if [ -n "$NF" ];then
			dns_nf=$(echo $dns_nf | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
			if ! dns_tmp=$(echo $dns_nf | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1);then
				echo "`eval $DATE` SmartDNS : Get Netflix DNS failed!" >> $LOG
				return 1
			fi
			for i in $dns_tmp;do ipset add netflix $i 2>/dev/null;done
		fi
	fi

	if [ $dns_mode_l = 0 ];then
		dns_l=$(uci_get_by_type global dns_l 0)
		case $dns_l in
			0)doh_l="https://dns.alidns.com/dns-query";dns_l="223.5.5.5 223.6.6.6 2400:3200::1 2400:3200:baba::1";dns_c=1;;
			1)doh_l="https://doh.pub/dns-query";dns_l="119.29.29.29 182.254.116.116";dns_c=1;;
			*)doh_l=$dns_l;dns_l=$(echo $dns_l | awk -F[/:] '{print$4}')
				dns_l=$(echo $dns_l | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+")
				if [ -z "$dns_l" ];then
					dns_l="223.5.5.5 223.6.6.6 2400:3200::1 2400:3200:baba::1";dns_c=1
				fi;;
		esac
		[ $(uci_get_by_type global isp_dns 0) = 1 ] && dns_l=isp
	else
		dns_l=$(uci_get_by_type global udp_dns isp)
	fi
	if [ "$dns_l" = isp ];then
		ref=/tmp/resolv.conf.d/resolv.conf.auto;[ -s $ref ] || ref=/tmp/resolv.conf.auto
		dns_l=$(cat $ref 2>/dev/null | grep nameserver | awk '{print$2}')
	fi
	if [ -z "$dns_l" ];then
		echo "`eval $DATE` SmartDNS : Get Domestic DNS failed!" >> $LOG
		return 1
	fi
	dns_l=$(echo $dns_l | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
	dns_tmp=$(echo $dns_l | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | grep -v 0.0.0.0 | grep -v 127.0.0.1)
	for i in $dns_tmp;do ipset add ss_spec_wan_ac $i 2>/dev/null;done
	smartdns_flag=1
	mkdir -p /tmp/dnsmasq.d $SDNS $DNS_DIR
	cat > $DNS_T <<EOF
force-AAAA-SOA yes
speed-check-mode none
cache-persist no
cache-size 0
log-level fatal
log-file $LOG
EOF
	echo "bind :5335 -group a" >> $DNS_T
	echo "bind :5336 -group e -no-rule-soa" >> $DNS_T
	if [ $dns_mode = 0 ];then
		if [ "$dns_a" = 1 ];then
			echo "server-https $doh -group a -exclude-default-group" >> $DNS_T
			for i in $dns;do echo "server-tcp $i -group b -exclude-default-group" >> $DNS_T;done
			doh_t=$(echo $doh | awk -F[/:] '{print$4}')
			case $run_mode in
				router|all)echo "nameserver /$doh_t/b" >> $DNS_T;;
				*)echo "domain-rules /$doh_t/ -nameserver b -ipset blacklist" >> $DNS_T;;
			esac
		else
			echo $doh | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group a -exclude-default-group/g' >> $DNS_T
		fi
		if [ -n "$NF" ];then
			if [ "$dns_b" = 1 ];then
				echo "server-https $doh_nf -group c -exclude-default-group" >> $DNS_T
				for i in $dns_nf;do echo "server-tcp $i -group d -exclude-default-group" >> $DNS_T;done
				doh_nf_t=$(echo $doh_nf | awk -F[/:] '{print$4}')
				echo "domain-rules /$doh_nf_t/ -nameserver d -ipset netflix" >> $DNS_T
			else
				echo $doh_nf | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group c -exclude-default-group/g' >> $DNS_T
			fi
		fi
	else
		for i in $dns;do echo "server-tcp $i -group a -exclude-default-group" >> $DNS_T;done
		[ -n "$NF" ] && for i in $dns_nf;do echo "server-tcp $i -group c -exclude-default-group" >> $DNS_T;done
	fi

	if [ $dns_mode_l = 0 ];then
		if [ "$dns_c" = 1 ];then
			echo "server-https $doh_l -group e -exclude-default-group" >> $DNS_T
			for i in $dns_l;do echo "server $i -group f -exclude-default-group" >> $DNS_T;done
			doh_l_t=$(echo $doh_l | awk -F[/:] '{print$4}')
			echo "domain-rules /$doh_l_t/ -nameserver f -ipset ss_spec_wan_ac" >> $DNS_T
		else
			echo $doh_l | sed 's/,/\n/g' | sed -e 's/^/server-https /g' -e 's/$/ -group e -exclude-default-group/g' >> $DNS_T
		fi
	else
		for i in $dns_l;do echo "server $i -group e -exclude-default-group" >> $DNS_T;done
	fi

	case $run_mode in
		all)port=5335;;
		gfw|oversea)port=5336;;
		*)port=5337;;
	esac
	cat > /tmp/dnsmasq.d/dnsmasq-ssr.conf <<EOF
no-resolv
server=127.0.0.1#$port
EOF
	if [ $run_mode = oversea ];then
		awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' /etc/ssr/oversea.list > $DNS_DIR/oversea.conf
		[ "$dns_a" = 1 ] && echo "server=/$doh_t/127.0.0.1#5335" >> $DNS_DIR/oversea.conf
	else
		if [ $run_mode != all ];then
			cp -f /etc/ssr/black.list $DNS_DIR/tmp
			awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $DNS_DIR/tmp > $DNS_DIR/black.conf
			if [ $run_mode = gfw ];then
				[ "$dns_a" = 1 ] && echo "server=/$doh_t/127.0.0.1#5335" >> $DNS_DIR/black.conf
				cp -f /tmp/ssrplus/gfw.list $DNS_DIR/tmp
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $DNS_DIR/tmp >> $DNS_DIR/black.conf
			fi
		fi

		if [ -s $DNS_DIR/black.conf ];then
			[ "$dns_b" = 1 ] && sed -i -e "/\/$doh_nf_t/d" -e "/\.$doh_nf_t/d" $DNS_DIR/black.conf
			echo "`sort -u $DNS_DIR/black.conf`" > $DNS_DIR/black.conf
			sed -e 's/.*=/ipset /g' -e 's/127.0.0.1#5335/blacklist/g' $DNS_DIR/black.conf > $CON_T
		else
			rm -f $DNS_DIR/black.conf
		fi

		if [ -n "$NF" ];then
			cp -f /etc/ssr/netflix.list $DNS_DIR/tmp
			D=$(cat $DNS_DIR/tmp)
			for i in $D;do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
				echo "domain-rules /$i/ -nameserver c -ipset netflix" >> $CON_T
			done
			if [ $run_mode = gfw ];then
				awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5335"'\n",$0)}' $DNS_DIR/tmp >> $DNS_DIR/black.conf
				[ "$dns_b" = 1 ] && echo "server=/$doh_nf_t/127.0.0.1#5335" >> $DNS_DIR/black.conf
			fi
		fi

		[ $run_mode = all -a "$dns_c" = 1 ] && echo "server=/$doh_l_t/127.0.0.1#5336" > $DNS_DIR/white.conf
		if [ -s /etc/ssr/white.list ];then
			cp -f /etc/ssr/white.list $DNS_DIR/tmp
			D=$(cat $DNS_DIR/tmp)
			for i in $D;do
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $DNS_DIR/black.conf 2>/dev/null
				sed -i -e "/\/$i\//d" -e "/\.$i\//d" $CON_T 2>/dev/null
			done
			awk '!/^$/&&!/^#/{printf("server=/%s/'"127.0.0.1#5336"'\n",$0)}' $DNS_DIR/tmp >> $DNS_DIR/white.conf
			awk '!/^$/&&!/^#/{printf("ipset /%s/'"ss_spec_wan_ac"'\n",$0)}' $DNS_DIR/tmp >> $CON_T
		fi
	fi
	[ -s $CON_T ] && echo "conf-file $CON_T" >> $DNS_T
	rm -f $DNS_DIR/tmp
	[ $(find $DNS_DIR -name \* -exec cat {} \; 2>/dev/null | wc -l) = 0 ] && rm -rf $DNS_DIR || echo conf-dir=$DNS_DIR >> /tmp/dnsmasq.d/dnsmasq-ssr.conf
	[ $run_mode = router ] && chinadns_flag=1
	if [ $STATUS = Y ];then
		killall -q -9 smartdns
		start_dns
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
		preload
	fi
}

start_switch(){
	if [ $(uci_get_by_type global enable_switch 0) = 1 -a -z "$switch_server" ];then
		service_start $BIN_DIR/ssr-switch start
		switch_enable=1
	fi
}

add_cron(){
	if ! grep -q $LOG $CRON_FILE;then
		echo "0 1 * * * rm -f $LOG" >> $CRON_FILE;A=1
	fi
	if [ $(uci_get_by_type server_subscribe auto_update 0) = 1 ];then
		if ! grep -wq "$(uci_get_by_type server_subscribe auto_update_time 6) \* \* \* .*$BIN_DIR" $CRON_FILE;then
			eval $CRON
			echo "0 $(uci_get_by_type server_subscribe auto_update_time 6) * * * $BIN_DIR/update" >> $CRON_FILE
			echo "5 $(uci_get_by_type server_subscribe auto_update_time 6) * * * $BIN_DIR/subscribe" >> $CRON_FILE;A=1
		fi
	else
		eval $CRON && A=1
	fi
	[ "$A" = 1 ] && /etc/init.d/cron restart
}

del_cron(){
	grep -q ssrplus $CRON_FILE && sed -i '/ssrplus/d' $CRON_FILE && B=1
	eval $CRON && B=1
	[ "$B" = 1 ] && /etc/init.d/cron restart
}

start_local(){
	[ $SO_SERVER = 0 -o "$socks5_start" = 1 ] && return
	socks5_ip=$(uci_get_by_name $SO_SERVER server)
	if ! echo $socks5_ip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null;then
		if [ -f $LOCK ];then
			r=1
			while ! nslookup $socks5_ip >/dev/null 2>&1;do
				[ $r -ge 20 ] && return 1 || let r++
				sleep 1
			done
		fi
		if ! A=$(nslookup $socks5_ip 2>/dev/null | grep Address | awk -F' ' '{print$NF}' | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$");then
			echo "`eval $DATE` Socks5 Node: Unable to get server address.Check domain name!" >> $LOG;return 1
		fi
		socks5_ip=$(echo "$A" | sed -n 1p)
	fi
	type=$(uci_get_by_name $SO_SERVER type)
	[ $type = ss -o $type = ssr ] && cmd=$(f_bin $type-local) || cmd=$(f_bin $type)
	if [ ! -x $cmd ];then
		echo "`eval $DATE` Socks5 Node: Can't find $(echo $type | tr a-z A-Z) program, start failed!" >> $LOG;return 1
	fi
	local_enable=1
	socks5_port=$(uci_get_by_type socks5_proxy local_port 1080)
	gen_config_file $SO_SERVER 3
	case $type in
		ss|ssr)
			$cmd -c $CONFIG_SOCK5_FILE -u >/dev/null 2>&1 &
			[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
			echo "`eval $DATE` Socks5 Node: $name Started!" >> $LOG;;
		v2ray|vless)
			$BIN_DIR/gen${type}config $SO_SERVER tcp 0 $socks5_port $socks5_ip > /var/etc/v2-ssr-socks5.json
			sed -i 's/\\//g' /var/etc/v2-ssr-socks5.json
			$cmd -c /var/etc/v2-ssr-socks5.json >/dev/null 2>&1 &
			echo "`eval $DATE` Socks5 Node: $($cmd -version | head -1 | awk '{print$1,$2}') Started!" >> $LOG;;
		trojan)
			$BIN_DIR/gentrojanconfig $SO_SERVER client $socks5_port $socks5_ip > /var/etc/trojan-ssr-socks5.json
			sed -i 's/\\//g' /var/etc/trojan-ssr-socks5.json
			$cmd -c /var/etc/trojan-ssr-socks5.json >/dev/null 2>&1 &
			echo "`eval $DATE` Socks5 Node: Trojan(Ver $($cmd --version 2>&1 | head -1 | awk '{print$4}')) Started!" >> $LOG;;
		naiveproxy)
			$cmd /var/etc/naive-ssr-socks5.json >/dev/null 2>&1 &
			echo "`eval $DATE` Socks5 Node: $($cmd --version | head -1) Started!" >>$LOG;;
	esac
	ipset add ss_spec_wan_ac $socks5_ip 2>/dev/null
}

gen_service_file(){
	[ $(uci_get_by_name $1 fast_open 0) = 1 ] && fast=true || fast=false
	if [ $2 = ss ];then
		cat <<-EOF >$3
{
"server":"0.0.0.0",
"server_port":$port,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method_ss)",
"fast_open":$fast
}
EOF
		plugin=$(uci_get_by_name $1 plugin 0)
		if [ $plugin != 0 -a -x "$(which $plugin)" ];then
			sed -i "s@0.0.0.0\",@0.0.0.0\",\n\"plugin\":\"$plugin\",\n\"plugin_opts\":\"$(uci_get_by_name $1 plugin_opts)\",@" $3
		fi
	else
		cat <<-EOF >$3
{
"server":"0.0.0.0",
"server_port":$port,
"password":"$pass",
"timeout":$timeout,
"method":"$(uci_get_by_name $1 encrypt_method)",
"protocol":"$(uci_get_by_name $1 protocol)",
"protocol_param":"$(uci_get_by_name $1 protocol_param)",
"obfs":"$(uci_get_by_name $1 obfs)",
"obfs_param":"$(uci_get_by_name $1 obfs_param)",
"fast_open":$fast
}
EOF
	fi
}

run_server(){
	[ $(uci_get_by_name $1 enable 0) = 0 ] && return 1
	let server_count=server_count+1
	[ $server_count = 1 ] && iptables-save -t filter | grep SSR-SERVER-RULE >/dev/null || iptables -N SSR-SERVER-RULE && iptables -t filter -I INPUT -j SSR-SERVER-RULE
	type=$(uci_get_by_name $1 type ssr)
	[ $type = ss -o $type = ssr ] && cmd=$(f_bin $type-server) || cmd=$(which microsocks)
	[ ! -x $cmd ] && echo "`eval $DATE` SSR server: Can't find $cmd program, start failed!" >> /tmp/ssrplus.log && return 1
	port=$(uci_get_by_name $1 server_port)
	pass=$(uci_get_by_name $1 password)
	name=ssr-server_$server_count
	case $type in
		ss|ssr)timeout=$(uci_get_by_name $1 timeout 60);gen_service_file $1 $type /var/etc/$name.json
			$cmd -c /var/etc/$name.json -u >/dev/null 2>&1 &
			[ $type = ss ] && name=Shadowsocks || name=ShadowsocksR
			echo "`eval $DATE` SSR server: $name Server$server_count Started!" >> /tmp/ssrplus.log;;
		*)
		if [ $(uci_get_by_name $1 auth_enable 0) = 1 ];then
			username=$(uci_get_by_name $1 username)
			if [ -n "$username" ];then
				param="$([ $(uci_get_by_name $1 auth_once 0) = 1 ] && echo -1) -u $username -P $pass"
			else
				echo "`eval $DATE` SSR server: Socks5 User and pass must be used together!" >> /tmp/ssrplus.log
				return 1
			fi
		fi
		$cmd -p $port $param $name >/dev/null 2>&1 &
		echo "`eval $DATE` SSR server: Socks5 Server$server_count Started!" >> /tmp/ssrplus.log;;
	esac
	iptables -t filter -A SSR-SERVER-RULE -p tcp --dport $port -j ACCEPT
	iptables -t filter -A SSR-SERVER-RULE -p udp --dport $port -j ACCEPT
	return 0
}

gen_serv_include(){
	[ -s $FWI ] || echo '#!/bin/sh' > $FWI
	extract_rules(){
		echo "*filter"
		iptables-save -t filter | grep SSR-SERVER-RULE | sed -e "s/^-A INPUT/-I INPUT/"
		echo 'COMMIT'
	}
	cat <<-EOF >> $FWI
iptables-save -c | grep -v "SSR-SERVER" | iptables-restore -c
iptables-restore -n <<-EOT
$(extract_rules)
EOT
EOF
}

start_server(){
	[ $(uci_get_by_type server_global enable_server 0) = 0 ] && return
	mkdir -p /var/etc
	config_load $NAME
	config_foreach run_server server_config
	gen_serv_include
}

start_monitor(){
	if [ $(uci_get_by_type global monitor_enable 0) = 1 ];then
		let total=redir_tcp+kcp_enable+redir_udp+redir_nf+smartdns_flag+chinadns_flag+local_enable+server_count+switch_enable
		[ $total -gt 0 ] && service_start $BIN_DIR/ssr-monitor $redir_tcp $kcp_enable $redir_udp $redir_nf $smartdns_flag $chinadns_flag $local_enable $server_count $trojan_udp $ip_port $trojan_udp_port
	fi
}

start(){
	if [ -n "$switch_server" ];then
		GLOBAL_SERVER=$switch_server
		switch_enable=1
	fi
	if rules;then
		if start_retcp;then
			[ -n "$UDP_RELAY_SERVER" ] && start_reudp
			[ -n "$NF" ] && start_renf
			gen_dns
			start_switch
			add_cron
		fi
	fi
	start_local
	start_server
	start_monitor
	rm -f $LOCK
}

stop(){
	kill -9 $(ps -w | grep ssr-rules | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep gfw.b64 | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/checknetwork | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep $BIN_DIR/update | grep -v grep | awk '{print$1}') 2>/dev/null
	$BIN_DIR/ssr-rules -f
	srulecount=`iptables -nL | grep SSR-SERVER-RULE | wc -l`
	if [ $srulecount -gt 0 ];then
		iptables -F SSR-SERVER-RULE
		iptables -t filter -D INPUT -j SSR-SERVER-RULE
		iptables -X SSR-SERVER-RULE 2>/dev/null
	fi
	[ -z "$switch_server" ] && kill -9 $(ps -w | grep ssr-switch | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep ssr-monitor | grep -v grep | awk '{print$1}') 2>/dev/null
	kill -9 $(ps -w | grep ssr-preload | grep -v grep | awk '{print$1}') 2>/dev/null
	killall -q -9 ss-redir ssr-redir v2ray trojan ipt2socks naive redsocks2 kcptun-client obfs-local obfs-server v2ray-plugin ss-local ss-server ssr-local ssr-server microsocks smartdns chinadns-ng
	rm -rf $DNS_DIR /var/etc/*ssr*.json /tmp/dnsmasq.d/dnsmasq-ssr.conf $CON_T /var/lock/ssr-plus.lock
	[ $run_mode = gfw -o $gfw_mode = 1 ] || rm -f /tmp/ssrplus/gfw.list
	[ $run_mode = router ] || rm -f /tmp/ssrplus/china_v6.txt
	if [ -z "$GLOBAL_SERVER" ];then
		del_cron;rm -rf /tmp/ssrplus $SDNS
	fi
	if [ $STATUS = Y ];then
		rm -rf /tmp/ssrplus $SDNS $PID
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
	fi
}

restart(){
	STATUS=N
	stop
	if [ -s $DNS_T ];then
	cat > $DNS_T <<EOF
speed-check-mode none
cache-persist no
cache-size 0
log-level fatal
log-file $LOG
bind :5335
bind :5336
bind :5337
EOF
		if [ $dns_mode_l = 0 -a $(uci_get_by_type global isp_dns 0) = 0 ];then
			dns_l="223.5.5.5 223.6.6.6"
		else
			dns_l=$(uci_get_by_type global udp_dns isp)
		fi
		if [ "$dns_l" = isp -o $dns_mode_l = 1 ];then
			if [ "$dns_l" = isp ];then
				ref=/tmp/resolv.conf.d/resolv.conf.auto;[ -s $ref ] || ref=/tmp/resolv.conf.auto
				dns_l=$(cat $ref 2>/dev/null | grep nameserver | awk '{print$2}')
			fi
			if [ -z "$dns_l" ];then
				echo "`eval $DATE` SmartDNS : Get Domestic DNS failed!" >> $LOG
				exit 1
			fi
			dns_l=$(echo $dns_l | sed -e 's/，/,/g' -e 's/。/./g' -e 's/：/:/g' -e 's/,/\n/g')
			for i in $dns_l;do echo "server $i" >> $DNS_T;done
		else
			for i in $dns_l;do echo "server-https https://$i/dns-query" >> $DNS_T;done
		fi
		$(which smartdns) -c $DNS_T
		r=1
		while ! ps -w | grep smartdns | grep -v grep >/dev/null;do
			[ $r -ge 10 ] && return 1 || let r++
			sleep 1
		done
		start
		killall -q -9 smartdns
		start_dns
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
		preload
	else
		if [ -f $PID ];then
			rm -f $PID
			/etc/init.d/dnsmasq restart >/dev/null 2>&1
		fi
		start
	fi
}

boot(){
	echo '#!/bin/sh' > $FWI
	touch $LOCK
	start
}
